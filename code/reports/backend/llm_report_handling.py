import re
import asyncio
from utils.configs import get_llm
from utils.data_cache import cached_get_summary, cached_get_schema, cached_data_retrieval

async def get_outline_response(prompt):
    context = f"""
    Using the provided context, generate an outline for a report based on the dataset.
    
    Context: {prompt}
    """
    llm = get_llm()
    response = await asyncio.to_thread(llm.get_response, context)
    
    return response

async def get_llm_response_for_section(prompt: str, section_name: str = None):
    """
    Asynchronously generates a response for a given section using a language model (LLM) based on a provided prompt and section name.
    Args:
        prompt (str): The prompt to guide the LLM's analysis.
        section_name (str, optional): The name of the section being analyzed. Defaults to None.
    Returns:
        str: The response generated by the LLM, with any function calls replaced by their respective results. If an error occurs, an error message is returned.
    Raises:
        Exception: If there is an error in generating the LLM response or executing the function calls.
    Notes:
        - The function uses cached schema and summary data to provide context to the LLM.
        - The LLM is instructed to use specific functions to retrieve additional data as needed.
        - The function calls in the LLM's response are executed and their results are substituted back into the response.
        - If the LLM cannot answer the prompt using the available data, it is instructed to say so explicitly.
    """
    schema = cached_get_schema()
    summary = cached_get_summary()
    
    context = f"""
    You are an AI assistant analyzing a dataset for the section: {section_name}

    Here's the schema of the dataset:
    {schema}

    And here's a summary of the dataset:
    {summary}

    You can use these functions to get additional data as needed:
    
    1. get_sample(n=5): Get n sample rows
    2. get_column_stats(column_name): Get stats for a specific column
    3. get_value_counts(column_name, top_n=10): Get top value counts for a specific column
    4. sum_single_column(column_name): Get the sum of a single column
    5. detect_outliers(column_name): Detect outliers in a column

    IMPORTANT: Do not reference functions unless you are using them.  All function references must include the necessary parameters.
    IMPORTANT: Only use column names that exist in the dataset. 

    To use a function, write it exactly as shown above, replacing parameters as needed.
    For example, to get a sample of 10 rows, write: get_sample(10)

    Analyze the data based on this prompt: {prompt}

    If you cannot answer the prompt using the available data, say so explicitly.
    DO NOT make up or assume any information that is not provided by these functions.
    """
    llm = get_llm()
    try:
        response = await asyncio.to_thread(llm.get_response, context)
    except Exception as e:
        return f"Error: {str(e)}"

    function_calls = re.findall(r'(get_\w+\([^)]*\))', response)
    
    for full_call in function_calls:
        try:
            func_name, args_str = full_call.split('(', 1)
            args_str = args_str.rstrip(')')
            args = [eval(arg.strip()) for arg in args_str.split(',') if arg.strip()]
            result = cached_data_retrieval(func_name, *args)
        except Exception as e:
            result = f"Error executing {full_call}: {str(e)}"

        response = response.replace(full_call, str(result))

    return response